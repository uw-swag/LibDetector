package com.zchi88.android.libdetector.utilities;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Contains methods for parsing through a diff.txt file generated by the LibDiff tool.
 *
 */
public class DiffParser {
	
	/**
	 * Parses a diff.txt file and looks for version-exclusive files of a library. 
	 * 
	 * @param diffFile
	 * @param machineOS 
	 * @returna A list of files that are exclusive to a library
	 * @throws IOException
	 */
	public static ArrayList<File> getNewFiles(File diffFile, String machineOS) throws IOException{
		ArrayList<File> exclusiveFilesList = new ArrayList<File>();
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(diffFile.toPath());
	    String nextLine;
	    
	    // Move to the start of the exclusive files listing
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (nextLine.startsWith("New Files: ")) {
	    		nextLine = scanner.nextLine();
	    		if (nextLine.equals("====================")) {
					break;
				}
			}
	    }
		
	    // Read each line, which represents a version exclusive file, until a newline character is hit.
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (!nextLine.isEmpty()) {
	    		if (machineOS.startsWith("linux") || machineOS.startsWith("mac")) {
	    			nextLine = nextLine.replace("\\", "/");
				}
				File exclusiveFile = new File(nextLine);
				exclusiveFilesList.add(exclusiveFile);
			} else {
				break;
			}
	    }
		
		return exclusiveFilesList;
	}
	
	/**
	 * Parses a diff.txt file and looks for modified files in a library. 
	 * 
	 * @param diffFile
	 * @return A list of modified files in a library
	 * @throws IOException
	 */
	public static ArrayList<File> getModdedFiles(File diffFile, String machineOS) throws IOException{
		ArrayList<File> moddedFilesList = new ArrayList<File>();
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(diffFile.toPath());
	    String nextLine;
	    
	    // Move to the start of the modified files listing
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (nextLine.startsWith("Modified Files: ")) {
	    		nextLine = scanner.nextLine();
	    		if (nextLine.equals("====================")) {
					break;
				}
			}
	    }
		
	    // Read each line, which represents a uniquely modified file, until a newline character is hit.
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (!nextLine.isEmpty()) {
	    		if (machineOS.startsWith("linux") || machineOS.startsWith("mac")) {
					nextLine = nextLine.replace("\\", "/");
				}
				File moddedFile = new File(nextLine);
				moddedFilesList.add(moddedFile);
			} else {
				break;
			}
	    }
		return moddedFilesList;
	}
	
	/**
	 * Parses a diff.txt file and looks for deleted files in a library, relative to its previous version. 
	 * 
	 * @param diffFile
	 * @return A list of deleted files in a library since the prior version
	 * @throws IOException
	 */
	public static ArrayList<File> getDeletedFiles(File diffFile, String machineOS) throws IOException{
		ArrayList<File> deletedFilesList = new ArrayList<File>();
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(diffFile.toPath());
	    String nextLine;
	    
	    // Move to the start of the modified files listing
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (nextLine.startsWith("Deleted Files: ")) {
	    		nextLine = scanner.nextLine();
	    		if (nextLine.equals("====================")) {
					break;
				}
			}
	    }
		
	    // Read each line, which represents a deleted file, until a newline character is hit.
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (!nextLine.isEmpty()) {
	    		if (machineOS.startsWith("linux") || machineOS.startsWith("mac")) {
	    			nextLine = nextLine.replace("\\", "/");
				}
				File deletedFile = new File(nextLine);
				deletedFilesList.add(deletedFile);
			} else {
				break;
			}
	    }
		return deletedFilesList;
	}
	
	
	/**
	 * Parses a diff.txt file and looks for copied files in a library, relative to its previous version. 
	 * 
	 * @param diffFile
	 * @return A list of deleted files in a library since the prior version
	 * @throws IOException
	 */
	public static ArrayList<File> getCopiedFiles(File diffFile, String machineOS) throws IOException{
		ArrayList<File> copiedFilesList = new ArrayList<File>();
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(diffFile.toPath());
	    String nextLine;
	    
	    // Move to the start of the modified files listing
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (nextLine.startsWith("Copied Files: ")) {
	    		nextLine = scanner.nextLine();
	    		if (nextLine.equals("====================")) {
					break;
				}
			}
	    }
		
	    // Read each line, which represents a copied file, until a newline character is hit.
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (!nextLine.isEmpty()) {
	    		if (machineOS.startsWith("linux") || machineOS.startsWith("mac")) {
	    			nextLine = nextLine.replace("\\", "/");
				}
				File copiedFile = new File(nextLine);
				copiedFilesList.add(copiedFile);
			} else {
				break;
			}
	    }
		return copiedFilesList;
	}
	
	
	/**
	 * Parses a diff.txt file and looks for the age of the version
	 * 
	 * @param diffFile
	 * @returna The age of the version
	 * @throws IOException
	 */
	public static int getVersionAge(File diffFile) throws IOException{
		int versionAge = -1;
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(diffFile.toPath());
	    String nextLine;
	    
	    // Move to the start of the exclusive files listing
	    while (scanner.hasNextLine()) {
	    	nextLine = scanner.nextLine();
	    	if (nextLine.startsWith("Version Age: ")) {
	    		versionAge = Integer.parseInt(nextLine.replace("Version Age: ", ""));
			}
	    }
		return versionAge;
	}
}
